AWSTemplateFormatVersion: '2010-09-09'
Description: Network CloudFormation Template

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Environment Configuration"
        Parameters:
          - Project
          - EnvironmentName
          - DedicatedNAT
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnetNAT1CIDR
          - PrivateSubnetNAT2CIDR
          - PrivateSubnetNAT3CIDR

    ParameterLabels:
      Project:
        default: Project Name
      EnvironmentName:
        default: Environment
      DedicatedNAT:
        default: Dedicated NAT gateways
      VPCCIDR:
        default: VPC CIDR
      PublicSubnet1CIDR:
        default: Public Subnet AZ1
      PublicSubnet2CIDR:
        default: Public Subnet AZ2
      PublicSubnet3CIDR:
        default: Public Subnet AZ3
      PrivateSubnet1CIDR:
        default: Private Subnet AZ1
      PrivateSubnet2CIDR:
        default: Private Subnet AZ2
      PrivateSubnet3CIDR:
        default: Private Subnet AZ3
      PrivateSubnetNAT1CIDR:
        default: Private NAT Subnet AZ1
      PrivateSubnetNAT2CIDR:
        default: Private NAT Subnet AZ2
      PrivateSubnetNAT3CIDR:
        default: Private NAT Subnet AZ3

# Custom Variable for the environment
Parameters:
  Project:
    Description: Name of the Project
    Type: String

  EnvironmentName:
    Description: Specify a environment name.
    Type: String
    AllowedValues:
      - test
      - beta
      - prod

  VPCCIDR:
    Description: VPC CIDR block.
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  # Public Subnets
  PublicSubnet1CIDR:
    Description: Public subnet 1 CIDR block.
    Type: String
    Default: 10.10.0.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PublicSubnet2CIDR:
    Description: Public subnet 2 CIDR block.
    Type: String
    Default: 10.10.64.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PublicSubnet3CIDR:
    Description: Public subnet 3 CIDR block.
    Type: String
    Default: 10.10.128.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  # Private Subnets
  PrivateSubnet1CIDR:
    Description: Private subnet 1 CIDR block.
    Type: String
    Default: 10.10.16.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PrivateSubnet2CIDR:
    Description: Private subnet 2 CIDR block.
    Type: String
    Default: 10.10.80.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PrivateSubnet3CIDR:
    Description: Private subnet 3 CIDR block.
    Type: String
    Default: 10.10.144.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  # Private NAT Subnets
  PrivateSubnetNAT1CIDR:
    Description: Private subnet NAT 1 CIDR block.
    Type: String
    Default: 10.10.32.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PrivateSubnetNAT2CIDR:
    Description: Private subnet NAT 2 CIDR block.
    Type: String
    Default: 10.10.96.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  PrivateSubnetNAT3CIDR:
    Description: Private subnet NAT 3 CIDR block.
    Type: String
    Default: 10.10.160.0/20
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC.

  DedicatedNAT:
    Description: Select "true" if you want to use dedicated ($) NAT gateways per subnet.
    Type: String
    AllowedValues:
      - yes
      - no

Conditions:
  UseDedicatedNAT: !Equals [!Ref DedicatedNAT, yes]

Resources:
  # Custom VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "vpc"]]

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: ap-northeast-2a
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "public-subnet-az1"]]
    DependsOn: VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: ap-northeast-2b
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "public-subnet-az2"]]
    DependsOn: VPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: ap-northeast-2c
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "public-subnet-az3"]]
    DependsOn: VPC

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: ap-northeast-2a
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-az1"]]
    DependsOn: VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: ap-northeast-2b
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-az2"]]
    DependsOn: VPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: ap-northeast-2c
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-az3"]]
    DependsOn: VPC

  # Private Subnets With NAT Gateway
  PrivateSubnetNAT1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetNAT1CIDR
      AvailabilityZone: ap-northeast-2a
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-nat-az1"]]
    DependsOn: VPC

  PrivateSubnetNAT2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetNAT2CIDR
      AvailabilityZone: ap-northeast-2b
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-nat-az2"]]
    DependsOn: VPC

  PrivateSubnetNAT3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetNAT3CIDR
      AvailabilityZone: ap-northeast-2c
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-subnet-nat-az3"]]
    DependsOn: VPC

  # Custom Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "igw"]]

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNAT1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "nat-gateway-az1"]]
    DependsOn:
      - PublicSubnet1
      - EIPNAT1
      - InternetGateway
      - VPCGatewayAttachment

  EIPNAT1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPC

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Condition: UseDedicatedNAT
    Properties:
      AllocationId: !GetAtt EIPNAT2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "nat-gateway-az2"]]
    DependsOn:
      - PublicSubnet2
      - EIPNAT2
      - InternetGateway
      - VPCGatewayAttachment

  EIPNAT2:
    Type: AWS::EC2::EIP
    Condition: UseDedicatedNAT
    Properties:
      Domain: vpc
    DependsOn: VPC

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Condition: UseDedicatedNAT
    Properties:
      AllocationId: !GetAtt EIPNAT3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "nat-gateway-az3"]]
    DependsOn:
      - PublicSubnet3
      - EIPNAT3
      - InternetGateway
      - VPCGatewayAttachment

  EIPNAT3:
    Type: AWS::EC2::EIP
    Condition: UseDedicatedNAT
    Properties:
      Domain: vpc
    DependsOn: VPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: [VPC, InternetGateway]

  # Route Tables
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "public-rt"]]
    DependsOn: VPC

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-rt"]]
    DependsOn: VPC

  RouteTablePrivateNAT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !If [UseDedicatedNAT, !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-nat-rt-az1"]], !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-nat-rt"]]]
    DependsOn: VPC

  RouteTablePrivateNAT2:
    Type: AWS::EC2::RouteTable
    Condition: UseDedicatedNAT
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-nat-rt-az2"]]
    DependsOn: VPC

  RouteTablePrivateNAT3:
    Type: AWS::EC2::RouteTable
    Condition: UseDedicatedNAT
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref Project, !Ref EnvironmentName, "private-nat-rt-az3"]]
    DependsOn: VPC

  # Routes
  RouteIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: [RouteTablePublic, InternetGateway, VPCGatewayAttachment]

  RouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateNAT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
    DependsOn: [RouteTablePrivateNAT1, NATGateway1, VPCGatewayAttachment]

  RouteNAT2:
    Type: AWS::EC2::Route
    Condition: UseDedicatedNAT
    Properties:
      RouteTableId: !Ref RouteTablePrivateNAT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
    DependsOn: [RouteTablePrivateNAT2, NATGateway2, VPCGatewayAttachment]

  RouteNAT3:
    Type: AWS::EC2::Route
    Condition: UseDedicatedNAT
    Properties:
      RouteTableId: !Ref RouteTablePrivateNAT3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3
    DependsOn: [RouteTablePrivateNAT3, NATGateway3, VPCGatewayAttachment]

  # Route Table Assocations
  PublicSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
    DependsOn: [RouteTablePublic, PublicSubnet1]

  PublicSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2
    DependsOn: [RouteTablePublic, PublicSubnet2]

  PublicSubnet3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet3
    DependsOn: [RouteTablePublic, PublicSubnet2]

  PrivateSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet1
    DependsOn: [RouteTablePrivate, PrivateSubnet1]

  PrivateSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet2
    DependsOn: [RouteTablePrivate, PrivateSubnet2]

  PrivateSubnet3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnet3
    DependsOn: [RouteTablePrivate, PrivateSubnet3]

  PrivateSubnetNAT1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateNAT1
      SubnetId: !Ref PrivateSubnetNAT1
    DependsOn: [RouteTablePrivateNAT1, PrivateSubnetNAT1]

  PrivateSubnetNAT2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [UseDedicatedNAT, !Ref RouteTablePrivateNAT2, !Ref RouteTablePrivateNAT1]
      SubnetId: !Ref PrivateSubnetNAT2
    DependsOn: [RouteTablePrivateNAT1, PrivateSubnetNAT2]

  PrivateSubnetNAT3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !If [UseDedicatedNAT, !Ref RouteTablePrivateNAT3, !Ref RouteTablePrivateNAT1]
      SubnetId: !Ref PrivateSubnetNAT3
    DependsOn: [RouteTablePrivateNAT1, PrivateSubnetNAT3]

Outputs:
  VPCId:
    Description: VPCId
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId

  PublicSubnet1:
    Description: PublicSubnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: PublicSubnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PublicSubnet3:
    Description: PublicSubnet3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3

  PrivateSubnet1:
    Description: PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: PrivateSubnet3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3

  PrivateSubnetNAT1:
    Description: PrivateSubnetNAT1
    Value: !Ref PrivateSubnetNAT1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetNAT1

  PrivateSubnetNAT2:
    Description: PrivateSubnetNAT2
    Value: !Ref PrivateSubnetNAT2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetNAT2

  PrivateSubnetNAT3:
    Description: PrivateSubnetNAT3
    Value: !Ref PrivateSubnetNAT3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetNAT3
